Tutorial 2 : Tools

Compiler:
Some IDEs ship with a compiler (Kdevelop, Xcode, QTCreator, etc. do not; they only use the compiler on your system). The IDEs listed above are typically run on Unix/Linx/Mac operating systems and they do this because the user may have a preference which compiler they use. However if you're using Microsoft (a very good chance), Visual studio does ship with a compiler.

Build System:
You may have never heard of a build system but they are extremely powerful and used quite a bit in development done on other operating systems like Unix/BSD/Linux/Mac OSX. We will be using the most popular; it is called CMake and it is very easy to use.

The basic overview of a build system like CMake is that you specify your project structure/files and you tell it to build a "makefile" (of sorts) for the build system you'd like. However, most IDEs support CMake and it's files outright so there isn't necessarly a need to `generate a ``make file of sorts''' (VS 2017 supports the use of a CMake files for projects). 

You may be asking yourself why you'd use a build system if you're always going to use Visual Studio, and I'd tell you that using a build system--at least just this once-- will teach you things/steps about the compiling process you may not have known. After this tutorial you can generate your project directories with a Visual Studio Wizard but for now please bear with me; you may really like CMake. You can do some extraordinary things with the tool.

Version Control:
We will be using Git for version control and later we will introduce using a host like Github.

## Git Installation

Head over to the Git website at https://git-scm.com/ and assuming you're on Windows you should see
a `Download X.XX.X for Windows` where the X's are version numbers (2.20.1 at time of writing).
Click the link and your download should start.

Find your download and start the installation, click next to the GPL.
Next you will see some options, have a quick look but you can click through to the next
screen. 
Here you will be asked to select an editor to use within Git Bash (`Bash` is a
Command Line Interface 0r CLI similar to the Windows DOS or Powershell windows).
Feel free to select another editor but VIM (the default) is integfrated right into 
the Bash shell and with just a few commands will provide a good workflow for quick 
text editing tasks within your shell session.

The next screen will ask where you want to use Git from, I suggest leaving the default
selection this way you can use Git in Powershell, Visual Studio etc rather than just Git Bash.

Leave the `Use the OpenSSL library` selected and click next. IN fact, you can click through 
the rest of the screens, these settings can be fined tuned once you get a better understanding
of how the Git system works.

You should now have one last screen with the README and an option to launch Git Bash, tick it
or use the desktop icon to fire it up for a look.
At the `$` (dollar sign) you can enter commands, type in `git version` and you should see
somethiong like `git version 2.20.1.windows.1`.

Git should bow be installed but if you have any trouble, the documentation on the Git site 
is excellent so have a dig around there for tips and more in depth tutorials etc.
