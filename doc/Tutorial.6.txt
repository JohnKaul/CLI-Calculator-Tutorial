Tutorial 6: Ready, Set, Go!

Let's create a program.

Place the CMakeLists.txt file at the root of our project and the main.cpp in the src folder.
                ...
                |
                +------ CLI Calculator
                        |
                        +------ CMakeLists.txt
                        |
                        +------ src
                        |       |
                        |       ------- main.cpp
                        ...

CMakeLists.txt
***
cmake_minimum_required( VERSION 2.8 )

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        set( CMAKE_CXX_COMPILER "clang++" )
        find_library (LIBSTDCXX NAMES stdc++)
        add_compile_options(-stdlib=libstdc++)
ENDIF()

# Project name...
project( CLICalculator )

# ==---------------------------== #
# Product version...
# ==---------------------------== #

# set( PROJECT_VERSION 1.0 )
# ...or...
set( VERSION_MAJOR 0 )
set( VERSION_MINOR 4 )
set( VERSION_PATCH 0 )

# ==---------------------------== #
# Directory setup
# ==---------------------------== #
set( SRCS_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/src )
set( SRCS_INCLUDE_DIR ${SRCS_DIR}/include )
set( DLL_SRCS_DIR ${SRCS_DIR}/lib )
set( EXTRA_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../include )

# EXECUTABLE_OUTPUT_PATH
# -----------------------
# set this variable to specify a common place where CMake should put all
# executable files (instead of CMAKE_CURRENT_BINARY_DIR)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

# LIBRARY_OUTPUT_PATH
# -----------------------
# set this variable to specify a common place where CMake should put all
# libraries (instead of CMAKE_CURRENT_BINARY_DIR)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})

# ==---------------------------== #
# Misc.
# ==---------------------------== #
# enable warnings
add_definitions( -DWall )

# ==---------------------------== #
# Search directories
# ==---------------------------== #
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${EXECUTABLE_OUTPUT_PATH}
    ${LIBRARY_OUTPUT_PATH}
    ${SRCS_INCLUDE_DIR}
    ${DLL_SRCS_DIR}
    ${EXTRA_INCLUDE_DIR}
    )

# ==---------------------------== #
# Source file list.
# ==---------------------------== #
set ( REQ_LIBRARIES
        ${LIBSTDCXX}
        )
#---
# Executables
set( MAIN_SRCS
    ${SRCS_DIR}/main.cpp
    )

# ==---------------------------== #

# copy the LICENCE file to the build directory
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE
    ${EXECUTABLE_OUTPUT_PATH}/LICENSE @ONLY
    )

# copy the README file to the build directory
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/README.md
    ${EXECUTABLE_OUTPUT_PATH}/README.txt @ONLY
    )

add_executable( ${PROJECT_NAME} ${MAIN_SRCS} ) 

target_link_libraries( ${PROJECT_NAME}
    ${REQ_LIBRARIES}
    )

install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    )

install(FILES
    ${EXECUTABLE_OUTPUT_PATH}/LICENSE
    DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    )

install(FILES
    ${EXECUTABLE_OUTPUT_PATH}/README.txt
    DESTINATION doc
    )
 
At this point, if you are using Visual Studio, you can open the project with Visual Studio using the File->Open->Cmake option but if you are using Xcode (on a mac), or another IDE on a *nix OS, or if you just wish to follow along using only the command line and your editor you need to preform one extra step; creating the "makefile".

To `create the makefile' all we have to do is to create a directory to host the build and tell CMake to make the makefile based on the settings it finds for our confugutation (the compiler we have, and the OS settings, etc., etc.).

$> cd <project folder>
$> mkdir bin
$> cd bin
$> cmake .. -G Unix Makefile

We now have to create a LICENSE and a Readme.md file at the root of our project. We will be using the BSD opensource license for this project and our Readme.md will be a model of simplicity.
                ...
                |
                +------ CLI Calculator
                        |
                        +------ CMakeLists.txt
                        |
                        +------ LICENSE 
                        |
                        +------ Readme.md
                        |
                        +------ src
                        |       |
                        |       ------- main.cpp
                        ...

LICENSE
***
Copyright (c)2018 John Kaul
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
***

ReadMe.md
***
A comand line calculator used for a tutorial.
***

We need to take a quick break and talk about how you interact with git; interaction with git is simple and straight-forward(ish) but it may seem a bit foriegn so a few quick notes should set you on the right path.

After every edit you COMMIT your changes to git.
        This can be one file at a time or two files in the case of a header/impl file change. I do both, if the change requires me to change both header and impl file I COMMIT both files at the same time but I strive to commit each change, not many at once.
It is good pratice to have a standard (tepmplate) commit style.
        I like to prefix my commit statements with the file(s) I am commiting.
        -e.g. "main.cpp: Fixed spelling error."

So, after you saved each file (License and the ReadMe) Visual studio should warn you that you have new commits to make. Make a comment -i.e. "Initial commit." and commit each file (one at a time please). Once that is done we can now add our main program; add this in the src directory add/commit the file to the git repo (you should now have made three commits).

NOTE: I typically use git on the command line and I thought I'd show you how I would preform the above so you can see it. You can still use your IDE if that make you more comfortable but you should see all the steps for your reference.

With a command line open at the root of our project folder:
$> git add LICENCE
$> git commit -m "LICENSE: Initial commit."
$> git add Readme
$> git commit -m "Readme: Initial commit."

What you can see from above is that I add/commit each file one at a time. I do this so my "log" is clean and clear as to what I changed when so if I ever have to roll back to a previous change I can pinpoint the locaiton in time when I need.

The other quirk you'll notice is my prefixing of the file name to the commit message. This is also for my `logs'. I like to know what files changed when, and this is a great visual aid formyself later.

Back to the setup.

Create/Open the main.cpp file with the following contents.

main.cpp
***
// File Last Updated: <DATE> 
//
//: CLI-Calculator
//
// BY  : <YOUR NAME>

#include <iostream>
#include <cstdlib>

//----------------------------------------------------------------------
// Main - CLI-Calculator
// This is a simple command line calculator tool built durring a tutorial.
//----------------------------------------------------------------------
int main(int argc, const char *argv[]) {
    return 0;
} ///:~
***

Commit the file to Git.

Build the program.

After you've made the build you may have notied that there is a few more files--especially the BIN folder--wating to be commited to Git; we don't commit things like executables or objects to git because they are always being compiled new. What we need now is a method to tell Git to ignore certain files and/or folders. This is done with a ".gitignore" file at the root of the project. 

                ...
                |
                +------ CLI Calculator
                        |
                        +------ CMakeLists.txt
                        |
                        +------ .gitignore
                        |
                        +------ src
                        |       |
                        |       ------- main.cpp
                        ...

Below is a good generic .gitignore file for you. You may find others on the internet--which is perfectly fine--but this is a trimed version of my standard .gitignore file which I've cribbed, cobbled, and appended over the years. With this file in place, git will ignore most of the stuff that is unnecessary to commit.

# Object files
##############################
*.o
*.ko

# Libraries
##############################
*.com
*.lib
*.a

# Shared objects
##############################
*.dll
*.so
*.so.*
*.dylib

# Executables
##############################
*.exe
*.out
*.app

# Packages
##############################
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Packing-only formats
##############################
*.iso
*.tar

# Package management formats
##############################
*.dmg
*.xpi
*.gem
*.egg
*.deb
*.rpm

# Logs and databases
##############################
*.log
*.sql
*.sqlite

# OS generated files
##############################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# C++ objects and libs
##############################
*.slo
*.lo
*.o
*.a
*.la
*.lai
*.so
*.dll
*.dylib

# CMake
###############################
CMakeCache.txt
CMakeFiles
Makefile
cmake_install.cmake
install_manifest.txt

# Local stuff
# This section is devoted to this project
##############################
bin/*
src/etc/*
mingw32*
*txt.user
tags

If you look over this file, you may notice that I keep a section at the end for "local stuff", this section is at the end of this list for several reasons (I'm talking about this to introduce you to some neuances).
1. The first reson being that I can quickly add items to this list while I'm in the command line (where I spend most of my time) with a simple command:
        $> echo <WHATEVER> >> .gitignore
2. The second being that I can quickly see what is in my list with a simple call to CAT (`cat' will print the file contents to the command line). 
        $> cat .gitignore

The second item listed above is something to take a closer look at because it is a small adaption to utilize tools already in place. -i.e. people often talk about "proper syntax formatting"--something I'm sure will come up for you when we start developing more code in the next few lessons--and I'd like to show you some of the reasons why I choose the coding style I chooose.

Searching or finding is a task often done--on larger programs especially--and by adopting a certain code style I've made my searches a little easier to do. Meaning that, often you may search files looking for bits of code or functions. I would preform this search with my text editor or the tool called GREP (both return searches similar) and I'd preform this on the command line.

        $> grep -r 'main' *

which may or not return a bunch of text for me to sift through. This should be similar no matter what tool you use to search -i.e. it returns a binch of stuff for you to hunt and peck through. 

Below is an example search return when I search for 'main'. As you can see if I knew I was looking for a function definition I could easy determine wich was a function def by the opening brace. And this is the point I am trying to make; often times people will make a syntax rule like "curly braces are always on a line of their own.". These rules are fine, everyone should be comfortable with their code, but often times people may overlook the nuances of their tools at hand; if you're just getting started with the C based languages, spend some time using one of the default syntax standards for awhile before you make snap judgments.

bin/Makefile:.PHONY : src/main.cpp.s
bin/Makefile:	@echo "... src/main.o"
bin/Makefile:	@echo "... src/main.i"
bin/Makefile:	@echo "... src/main.s"
src/main.cpp: int main(int argc, const char *argv[]) {

The style I use is very close to the 1TBS or the BSD KBS styles. You can read this page for more infomation on coding styles:

https://en.wikipedia.org/wiki/Indentation_style
