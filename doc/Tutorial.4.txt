Tutorial 4: MAKING a program

I've told you that we want to use an IDE to build our program but that doesn't mean we can't understand the steps that happen when we hit the build button.  

10,000 foot overview:
       1. The first thing the compiler does is preprocess the file(s) and "copy-paste" any needed code into your file(s).
        
       2. The next step is compiling.
        
       3. After that is linking.

This may not sound like a lot of steps (there are actually more steps but the compiler takes care of most by itself) but building a program is really not that difficult when you are talking about a program with one (maybe two files). However, this is almost never the case; you will almost always have many (if not hundreds) of files in a single program. Our program will start off with one file--and we will quickly jump to more almost right away--and managing all these steps for several files is not an easy task. This is where our "build system" (CMake) steps in; CMake simplifies these steps greatly. 

This is a simple CMakeLists file (this file is placed at the project root.

                ...
                |
                +------ tools
                        |
                        +------ CLI Calculator
                                |
                                +------ CMakeLists.txt
                                |
                                +------ bin
                                |
                                +------ doc
                                |
                                +------ src
                                |       |
                                |       +------ include
                                |       |
                                |       +------ lib
                                +------ tests


Inside the CMakeLists.txt file we give CMake an overview of where our files are kept and where they should be put and also any extra information we can like project name, where to find other files and even build instructions.

The following is our first attempt at our CMakeLists.txt 

cmake_minimum_required( VERSION 2.8 )

# ==---------------------------== #
# Project name...
# ==---------------------------== #
project( CLICalculator )

# ==---------------------------== #
# Product version...
# ==---------------------------== #

set( PROJECT_VERSION 1.0 )

# ==---------------------------== #
# Directory setup
# ==---------------------------== #
set( SRCS_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/src )
set( PROJECT_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bin )

# EXECUTABLE_OUTPUT_PATH
# -----------------------
# set this variable to specify a common place where CMake should put all
# executable files (instead of CMAKE_CURRENT_BINARY_DIR)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

# ==---------------------------== #
# Misc.
# ==---------------------------== #

# enable warnings
add_definitions( -DWall )

# ==---------------------------== #
# Search directories
# ==---------------------------== #
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${EXECUTABLE_OUTPUT_PATH}
    )

# ==---------------------------== #
# Source file list.
# ==---------------------------== #

#---
# Executables
set( MAIN_SRCS
    ${SRCS_DIR}/main.cpp
    )

# ==---------------------------== #

# copy the LICENCE file to the build directory
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/doc/LICENSE.txt
    ${EXECUTABLE_OUTPUT_PATH}/LICENSE.txt @ONLY
    )

# copy the README file to the build directory
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/doc/ReadMe.txt
    ${EXECUTABLE_OUTPUT_PATH}/ReadMe.txt @ONLY
    )

add_executable( ${PROJECT_NAME} ${MAIN_SRCS} ) 


This should be very readable but I'll attempt to hit on some of the higher level points for you to focus on.

Comments in a CMake file are denoted with a hash ('#') symbol.
The first few lines are basic CMake setup; we define that we require at least CMake version XXX to run. The next line is the project name we have chosen for this project (also the name of our binary later). 
Next we start to get into some of the more interesting parts; we define a variable for use later.

"set( PROJECT_VERSION 1.0 )" is actually defining a variable called "PROJECT_VERSION". This variable can be used later with a few extra characters appended to it; if we want to use that varaible we use the string: "${PROJECT_VERSION}". 

Next we start telling CMake where/what our directory structure is. This is very important for us! We can acutally organize our files in any location that make sense to *us*--not an IDE-. This is also where true power of our super awesome directory structure comes into play. We currently have a spot for third party tools and APIs and we just tell CMake where those are located relative to our current directory. As this point you should realize a minor point, this means that other people would need this exact directory structure to build this program and sofar, that is correct but that isn't necessarly the case later when we get into more advanced CMake. For example, if our program required a popular third party API we could tell CMake to find it on the users machine or even prompt them to set a setting (or even go fetch it from the internet--but that isn't very nice so we won't be touching on that). 

We also preform a neat little trick here with our LICENSE and README file. We copy the files to our binary folder. We do this because I wanted to introduce a very cool feature to you right away. The "@ONLY" part of those statements is a neat trick where variables, in these files, of the form @VAR@ will be replaced (${VAR} will be ignored). 
