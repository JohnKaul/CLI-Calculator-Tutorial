Tutorial 4: MAKING a program

I've told you that we want to use an IDE to build our program but that doesn't mean we can't understand the steps that happen when we hit the build button.  

10,000 foot overview:
       1. The first thing the compiler does is preprocess the file(s) and "copy-paste" any needed code into your file(s).
        
       2. The next step is compiling.
        
       3. After that is linking.

This may not sound like a lot of steps (there are actually more steps but the compiler takes care of most by itself) but building a program is really not that difficult when you are talking about a program with one (maybe two files). However, this is almost never the case; you will almost always have many (if not hundreds) of files in a single program. Our program will start off with one file--and we will quickly jump to more almost right away--and managing all these steps for several files is not an easy task. This is where our "build system" (CMake) steps in; CMake simplifies these steps greatly. 

This is a simple CMakeLists file (this file is placed at the project root.

                ...
                |
                +------ tools
                        |
                        +------ CLI Calculator
                                |
                                +------ CMakeLists.txt
                                |
                                +------ bin
                                |
                                +------ doc
                                |
                                +------ src
                                |       |
                                |       +------ include
                                |       |
                                |       +------ lib
                                +------ tests


Inside the CMakeLists.txt file we give CMake an overview of where our files are kept and where they should be put and also any extra information we can like project name, where to find other files and even build instructions.

The following is our first attempt at our CMakeLists.txt 

cmake_minimum_required( VERSION 2.8 )

# ==---------------------------== #
# Project name...
# ==---------------------------== #
project( CLICalculator )

# ==---------------------------== #
# Product version...
# ==---------------------------== #

set( PROJECT_VERSION 1.0 )

# ==---------------------------== #
# Directory setup
# ==---------------------------== #
set( SRCS_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/src )

# EXECUTABLE_OUTPUT_PATH
# -----------------------
# set this variable to specify a common place where CMake should put all
# executable files (instead of CMAKE_CURRENT_BINARY_DIR)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

# ==---------------------------== #
# Misc.
# ==---------------------------== #

# enable warnings
add_definitions( -DWall )

# ==---------------------------== #
# Search directories
# ==---------------------------== #
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${EXECUTABLE_OUTPUT_PATH}
    )

# ==---------------------------== #
# Source file list.
# ==---------------------------== #

#---
# Executables
set( MAIN_SRCS
    ${SRCS_DIR}/main.cpp
    )

# ==---------------------------== #

# copy the LICENCE file to the build directory
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/doc/LICENSE.txt
    ${EXECUTABLE_OUTPUT_PATH}/LICENSE.txt @ONLY
    )

# copy the README file to the build directory
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/doc/ReadMe.txt
    ${EXECUTABLE_OUTPUT_PATH}/ReadMe.txt @ONLY
    )

add_executable( ${PROJECT_NAME} ${MAIN_SRCS} ) 

install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    )

install(FILES
    ${EXECUTABLE_OUTPUT_PATH}/LICENSE.txt
    DESTINATION ${EXECUTABLE_OUTPUT_PATH}
    )

install(FILES
    ${EXECUTABLE_OUTPUT_PATH}/ReadMe.txt
    DESTINATION doc
    )
